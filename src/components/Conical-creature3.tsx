/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t ./public/models/conical-creature3.glb
*/

import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { AnimationClip, Vector3 } from 'three'
import { ShapeType, threeToCannon } from 'three-to-cannon'
import { ConvexPolyhedron } from 'cannon-es'
import { useConvexPolyhedron } from '@react-three/cannon'
import { ThreeElements, ThreeEvent, useThree } from '@react-three/fiber'
import { useDrag, useGesture } from 'react-use-gesture'
import { updateExpressionWithTypeArguments } from 'typescript'

type GLTFResult = GLTF & {
  nodes: {
    Cone: THREE.SkinnedMesh
    Bone: THREE.Bone
    Hipl: THREE.Bone
    Hipr: THREE.Bone
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

type GestureEvent = {
  drag: ThreeEvent<PointerEvent>
  wheel: ThreeEvent<PointerEvent>
  scroll: ThreeEvent<PointerEvent>
  move: ThreeEvent<PointerEvent>
  hover: ThreeEvent<PointerEvent>
  pinch: ThreeEvent<PointerEvent>
}

export function ConicalCreature3(props: any) {
  const { nodes, materials, animations } = useGLTF('/models/conical-creature3.glb') as GLTFResult

  const { shape } = threeToCannon(nodes.Cone, {type: ShapeType.HULL})!!

  const vertices = (shape as ConvexPolyhedron).vertices
  const faces = (shape as ConvexPolyhedron).faces

  const [ref, api] = useConvexPolyhedron(() => ({
    mass: 1, 
    args: [vertices.map(vertex => vertex.toArray()), faces],
    position: props.position
  }))

  const { actions } = useAnimations<AnimationClip>(animations, ref)
  
  useEffect(() => {
    actions.Walk1?.play()
  }, [])

  const bind = useGesture<GestureEvent>({
    onDrag: ({ event }) => {
      props.setControls(false)

      const dragDistance = 10
  
      const relativePosition = event.ray.direction.multiplyScalar(dragDistance)
      const cameraPosition = new Vector3(...event.camera.position.toArray())
      const newPosition = cameraPosition.add(relativePosition)
  
      api.position.copy(newPosition)
  
      api.velocity.set(0, 0, 0)
      api.mass.set(0)
    },
    onDragEnd: () => {
      props.setControls(true)
      api.mass.set(1)
    }
  })

  return (
    <group 
      ref={ref} 
      {...props}
      {...bind()}
      dispose={null}
    >
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Hipl} />
          <primitive object={nodes.Hipr} />
          <skinnedMesh 
            name="Cone" 
            geometry={nodes.Cone.geometry} 
            material={materials['Material.001']} 
            skeleton={nodes.Cone.skeleton} 
            castShadow
          />
        </group>
      </group>
    </group>
  )
}

export default ConicalCreature3

useGLTF.preload('/models/conical-creature3.glb')
