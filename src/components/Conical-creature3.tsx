/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 -t ./public/models/conical-creature3.glb
*/

import * as THREE from 'three'
import { useEffect, useMemo, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'
import { AnimationClip, Vector3 } from 'three'
import { ShapeType, threeToCannon } from 'three-to-cannon'
import { Box, ConvexPolyhedron, Cylinder } from 'cannon-es'
import { useBox, useConvexPolyhedron, useCylinder } from '@react-three/cannon'
import { ThreeEvent, useFrame, useGraph } from '@react-three/fiber'
import { useGesture } from 'react-use-gesture'

type GLTFResult = GLTF & {
  nodes: {
    Cone: THREE.SkinnedMesh
    Bone: THREE.Bone
    Hipl: THREE.Bone
    Hipr: THREE.Bone
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

type GestureEvent = {
  drag: ThreeEvent<PointerEvent>
  wheel: ThreeEvent<PointerEvent>
  scroll: ThreeEvent<PointerEvent>
  move: ThreeEvent<PointerEvent>
  hover: ThreeEvent<PointerEvent>
  pinch: ThreeEvent<PointerEvent>
}

export function ConicalCreature3(props: any) {
  const { scene, animations } = useGLTF('/models/conical-creature3.glb') as GLTFResult
  const copiedScene = useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(copiedScene) as GLTFResult

  const { shape, offset } = threeToCannon(nodes.Cone, {type: ShapeType.BOX})!!

  const box = (shape as Box).halfExtents

  const [ref, api] = useBox(() => ({
    mass: 1, 
    args: [box.x * 2, box.y * 2, box.z * 2],
    position: props.position
  }))

  const { actions } = useAnimations<AnimationClip>(animations, ref)
  
  const grabInfo = useRef<{held: Boolean, holdPosition: Vector3}>({held: false, holdPosition: new Vector3(0, 0, 0)})

  useEffect(() => {
    nodes.Cone.geometry.translate(-offset!!.x/2, -offset!!.y/2, -offset!!.z/2)
    actions.Walk1?.play()
    api.angularDamping.set(1)
  }, [ref, api])

  useFrame(() => {
    if (grabInfo.current.held) {
      const targetPosition = new Vector3(...grabInfo.current.holdPosition.toArray())
      targetPosition.sub(ref.current!!.getWorldPosition(new Vector3(0, 0, 0))).multiplyScalar(10)
      api.velocity.copy(targetPosition)
    }
  })

  const bind = useGesture<GestureEvent>({
    onDrag: ({ event }) => {
      props.setControls(false)

      const dragDistance = 10
  
      const relativePosition = event.ray.direction.multiplyScalar(dragDistance)
      const cameraPosition = new Vector3(...event.camera.position.toArray())
      const newPosition = cameraPosition.add(relativePosition)

      grabInfo.current.holdPosition.copy(newPosition)
      grabInfo.current.held = true
    },
    onDragEnd: () => {
      props.setControls(true)
      grabInfo.current.held = false
    }
  })

  return (
    <group 
      ref={ref} 
      {...props}

      {...bind()}
      dispose={null}
    >
      <group name="Scene">
        <group name="Armature">
          <primitive object={nodes.Bone} />
          <primitive object={nodes.Hipl} />
          <primitive object={nodes.Hipr} />
          <skinnedMesh 
            name="Cone" 
            geometry={nodes.Cone.geometry} 
            material={materials['Material.001']} 
            skeleton={nodes.Cone.skeleton} 
            castShadow
          />
        </group>
      </group>
    </group>
  )
}

export default ConicalCreature3

useGLTF.preload('/models/conical-creature3.glb')
